{"version":3,"sources":["ControlLabel.tsx","Slider.tsx","Curve.ts","State.ts","Toggler.tsx","ControlsOverlay.tsx","renderFrame.ts","RadialsCanvas.tsx","useCanvasRenderer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlLabel","styled","span","StyledThumb","div","sliderHeight","Thumb","props","state","valueNow","StyledTrack","index","Track","StyledSlider","ReactSlider","sliderWidth","StyledSliderContainer","p","fontSize","Slider","value","label","onChangeExternal","onChange","step","min","max","smallFont","useCallback","newValue","renderTrack","renderThumb","Curve","a1","c1","c2","a2","this","ctx","rotation","offset","vec2","drawControlLines","rotate","undefined","add","x","y","beginPath","moveTo","bezierCurveTo","lineTo","stroke","clamp","Math","State","maxCurveSize","maxControlPointSize","round","maxCPVelocity","curveWidth","numRadials","skipEveryNthRadial","numberOfRadialsToSkip","windowSizeProportion","c1x","c1y","c2x","c2y","c1xVelocity","c1yVelocity","c2xVelocity","c2yVelocity","spin","spinVelocity","showControlLines","renderControls","setMaxCurveSize","vel","ContainerDiv","StyledControlLabel","Toggler","defaultChecked","icons","OverlayDiv","showBackground","ControlsDiv","ControlsContainerDiv","StyledDivider","StyledButton","button","StyledSectionLabel","StyledAnchor","a","StyledFooter","ControlsOverlay","forceUpdate","useState","updateState","useForceUpdate","useEffect","showControls","setShowControls","allCPVel","setAllCPVel","onClick","prev","setC1x","bind","setC1y","setC2x","setC2y","setC1xVelocity","setC1yVelocity","setC2xVelocity","setC2yVelocity","abs","setNumRadials","n","href","renderFrame","canvas","timeDelta","center","window","innerWidth","innerHeight","clearRect","width","height","strokeStyle","lineWidth","drawSurroundingCircle","curve","getCurve","i","PI","render","arc","StyledCanvas","RadialsCanvas","canvasRef","useRef","resizeCanvas","current","newMaxCurveSize","renderRequestId","startTime","addEventListener","requestAnimationFrame","timestamp","context2D","getContext","deltaTime","cancelAnimationFrame","removeEventListener","useCanvasRenderer","id","ref","AppDiv","App","stateRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7057bc77.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const controlLabelHeight = 20;\n\nexport const ControlLabel = styled.span`\n  text-align: center;\n  line-height: ${controlLabelHeight}px;\n  padding-left: 10px;\n  font-size: 14px;\n\n  @media (max-width: 768px) {\n    font-size: 12px;\n  }\n`;\n","import { useCallback } from \"react\";\nimport ReactSlider, { ReactSliderProps } from \"react-slider\";\nimport styled from \"styled-components\";\nimport { ControlLabel, controlLabelHeight } from \"./ControlLabel\";\n\n// https://zillow.github.io/react-slider/\nconst sliderHeight = controlLabelHeight;\nconst sliderWidth = 200;\n\nconst StyledThumb = styled.div`\n  height: ${sliderHeight + 2}px;\n  line-height: ${sliderHeight + 2}px;\n  width: ${sliderHeight + 2}px;\n  text-align: center;\n  background-color: #0099ff;\n  color: #fff;\n  border-radius: 50%;\n  cursor: grab;\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const Thumb = (props: any, state: any) => (\n  <StyledThumb {...props}>{state.valueNow}</StyledThumb>\n);\n\nconst StyledTrack = styled.div<{ index: number }>`\n  height: ${sliderHeight}px;\n  border-radius: 999px;\n  background: ${(props) => (props.index === 0 ? \"#005bd9\" : \"#1e217d\")};\n  border: 1px solid #606060;\n`;\n\nexport const Track = (props: any, state: any) => (\n  <StyledTrack {...props} index={state.index} />\n);\n\nconst StyledSlider = styled(ReactSlider)`\n  width: ${sliderWidth}px;\n\n  @media (max-width: 768px) {\n    width: ${sliderWidth * 0.7}px;\n  }\n`;\n\nconst StyledSliderContainer = styled.div<{ fontSize: number }>`\n  display: flex;\n  padding: 5px 0px;\n  ${StyledThumb} {\n    font-size: ${(p) => p.fontSize}px;\n  }\n`;\n\ninterface SliderProps extends Partial<ReactSliderProps<number>> {\n  value: number;\n  label: string;\n  onChange?: (value: number) => void;\n  smallFont?: boolean;\n}\n\nexport const Slider: React.FC<SliderProps> = ({\n  value,\n  label,\n  onChange: onChangeExternal,\n  step,\n  min,\n  max,\n  smallFont = false,\n}) => {\n  const onChange = useCallback(\n    (newValue) => {\n      onChangeExternal?.(newValue);\n    },\n    [onChangeExternal]\n  );\n\n  return (\n    <StyledSliderContainer fontSize={smallFont ? 9 : 16}>\n      <StyledSlider\n        renderTrack={Track}\n        renderThumb={Thumb}\n        value={[value]}\n        onChange={onChange}\n        step={step}\n        min={min}\n        max={max}\n      />\n      <ControlLabel>{label}</ControlLabel>\n    </StyledSliderContainer>\n  );\n};\n","import vec2 from \"vec2\";\n\nexport class Curve {\n  a1: vec2;\n  c1: vec2;\n  c2: vec2;\n  a2: vec2;\n\n  constructor(a1: vec2, c1: vec2, c2: vec2, a2: vec2) {\n    this.a1 = a1;\n    this.c1 = c1;\n    this.c2 = c2;\n    this.a2 = a2;\n  }\n\n  render(ctx: CanvasRenderingContext2D, rotation: number = 0, offset: vec2 = new vec2(0,0), drawControlLines: boolean = false) {\n    const a1 = this.a1.rotate(rotation, undefined, true).add(offset.x, offset.y);\n    const c1 = this.c1.rotate(rotation, undefined, true).add(offset.x, offset.y);;\n    const c2 = this.c2.rotate(rotation, undefined, true).add(offset.x, offset.y);;\n    const a2 = this.a2.rotate(rotation, undefined, true).add(offset.x, offset.y);;\n\n    ctx.beginPath();\n    ctx.moveTo(a1.x, a1.y);\n    ctx.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, a2.x, a2.y);\n\n    if (drawControlLines) {\n      ctx.moveTo(a1.x, a1.y);\n      ctx.lineTo(c1.x, c1.y);\n      ctx.moveTo(c2.x, c2.y);\n      ctx.lineTo(a2.x, a2.y);\n    }\n\n    ctx.stroke();\n  }\n}","import vec2 from \"vec2\";\nimport { Curve } from \"./Curve\";\n\nexport const startingCPVelocity = 1.0;\nconst curveSizeToCPSizeRatio = 7.0/5.0;\n\nconst clamp = (x: number, value: number) => Math.max(Math.min(x, value), -value);\n\nexport class State {\n  maxCurveSize = 400;\n  maxControlPointSize = Math.round(this.maxCurveSize*curveSizeToCPSizeRatio);\n  maxCPVelocity = 3;\n\n  curveWidth = 4;\n\n  numRadials = 10;\n  skipEveryNthRadial = 0;\n  numberOfRadialsToSkip = 1;\n\n  windowSizeProportion = 0.7;\n\n  c1x: number;\n  c1y: number;\n  c2x: number;\n  c2y: number;\n\n  c1xVelocity: number;\n  c1yVelocity: number;\n  c2xVelocity: number;\n  c2yVelocity: number;\n\n  spin = 0;\n  spinVelocity = 0.1;\n\n  showControlLines = false;\n\n  renderControls: () => void;\n\n  constructor() {\n    this.setMaxCurveSize(400);\n\n    this.c1x = 90;\n    this.c1y = 130;\n    this.c2x = 150;\n    this.c2y = -20;\n\n    this.c1xVelocity = 1.0;\n    this.c1yVelocity = 1.2;\n    this.c2xVelocity = 1.4;\n    this.c2yVelocity = 1.6;\n\n    this.renderControls = () => {}\n  }\n\n  setNumRadials(numRadials: number) {\n    this.numRadials = numRadials;\n  }\n\n  setMaxCurveSize(maxCurveSize: number) {\n    this.maxCurveSize = maxCurveSize;\n    this.maxControlPointSize = Math.round(this.maxCurveSize*curveSizeToCPSizeRatio);\n  }\n\n  setC1x(c1x: number) {\n    this.c1x = clamp(c1x, this.maxControlPointSize);\n  }\n  setC1y(c1y: number) {\n    this.c1y = clamp(c1y, this.maxControlPointSize);\n  }\n  setC2x(c2x: number) {\n    this.c2x = clamp(c2x, this.maxControlPointSize);\n  }\n  setC2y(c2y: number) {\n    this.c2y = clamp(c2y, this.maxControlPointSize);\n  }\n  setC1xVelocity(vel: number) {\n    this.c1xVelocity = clamp(this.c1xVelocity >= 0 ? vel : -vel, this.maxCPVelocity);\n  }\n  setC1yVelocity(vel: number) {\n    this.c1yVelocity = clamp(this.c1yVelocity >= 0 ? vel : -vel, this.maxCPVelocity);\n  }\n  setC2xVelocity(vel: number) {\n    this.c2xVelocity = clamp(this.c2xVelocity >= 0 ? vel : -vel, this.maxCPVelocity);\n  }\n  setC2yVelocity(vel: number) {\n    this.c2yVelocity = clamp(this.c2yVelocity >= 0 ? vel : -vel, this.maxCPVelocity);\n  }\n\n  getCurve() {\n    return new Curve(\n      new vec2(0, 0),\n      new vec2(this.c1x, this.c1y),\n      new vec2(this.c2x, this.c2y),\n      new vec2(this.maxCurveSize, 0)\n    );\n  }\n}","import { default as ReactToggle } from \"react-toggle\";\nimport styled from \"styled-components\";\nimport { ControlLabel } from \"./ControlLabel\";\n\nimport \"./Toggler.css\";\n\n// Docs: http://aaronshaf.github.io/react-toggle/\n\ninterface TogglerProps {\n  label: string;\n  defaultChecked: boolean;\n  onChange: () => void;\n}\n\nconst ContainerDiv = styled.div`\n  display: flex;\n`;\n\nconst StyledControlLabel = styled(ControlLabel)`\n  margin: 5px 0px;\n`;\n\nexport const Toggler: React.FC<TogglerProps> = ({\n  defaultChecked,\n  onChange,\n}) => (\n  <ContainerDiv>\n    <ReactToggle\n      defaultChecked={defaultChecked}\n      icons={false}\n      onChange={onChange}\n    />\n    <StyledControlLabel>Show Control Lines</StyledControlLabel>\n  </ContainerDiv>\n);\n","import { useCallback, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Slider } from \"./Slider\";\nimport { startingCPVelocity, State } from \"./State\";\nimport { Toggler } from \"./Toggler\";\n\nconst OverlayDiv = styled.div<{ showBackground: boolean }>`\n  position: absolute;\n  color: white;\n  padding-left: 10px;\n  padding-right: 10px;\n  height: 100vh;\n  background: linear-gradient(\n    0.25turn,\n    rgba(0, 0, 0, ${(p) => (p.showBackground ? 0.5 : 0)}),\n    92%,\n    rgba(0, 0, 0, 0)\n  );\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media (max-width: 768px) {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n`;\n\nconst ControlsDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ControlsContainerDiv = styled.div``;\n\nconst StyledDivider = styled.div`\n  background-color: #555555;\n  justify-self: center;\n  align-self: center;\n  height: 1px;\n  width: 95%;\n  margin: 8px 0px;\n\n  @media (max-width: 768px) {\n    margin: 4px 0px;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: #0099ff;\n  border-radius: 5px;\n  color: white;\n  font-size: 20px;\n  margin-top: 10px;\n`;\n\nconst StyledSectionLabel = styled.span`\n  color: white;\n  font-size: 16px;\n  padding: 16px 0px 4px;\n  font-weight: bold;\n\n  @media (max-width: 768px) {\n    font-size: 14px;\n    padding: 8px 0px 2px;\n  }\n`;\n\nconst StyledAnchor = styled.a`\n color: white;\n &:visited { color: whitesmoke; }\n &:hover { color: #06e; }​\n`;\n\nconst StyledFooter = styled.div`\n  font-size: 14px;\n  padding-bottom: 10px;\n`;\n\nconst useForceUpdate = () => {\n  const [, updateState] = useState({});\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  return forceUpdate;\n};\n\nexport const ControlsOverlay: React.FC<{ state: State }> = ({ state }) => {\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    state.renderControls = forceUpdate;\n  }, [forceUpdate, state]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  const [allCPVel, setAllCPVel] = useState(startingCPVelocity);\n\n  const renderNumberOfRadialsSection = () => (\n    <>\n      <StyledSectionLabel>Radial Properties</StyledSectionLabel>\n      <Slider\n        value={state.numRadials}\n        min={1}\n        max={75}\n        onChange={state.setNumRadials.bind(state)}\n        label=\"Num of Radials\"\n      />\n      <Slider\n        value={state.spinVelocity}\n        min={-1}\n        max={1}\n        step={0.1}\n        onChange={(vel) => (state.spinVelocity = vel)}\n        smallFont\n        label=\"Spin Velocity\"\n      />\n      <Slider\n        value={state.skipEveryNthRadial}\n        min={0}\n        max={10}\n        onChange={(n) => (state.skipEveryNthRadial = n)}\n        label=\"Skip every Nth one\"\n      />\n      <Slider\n        value={state.numberOfRadialsToSkip}\n        min={1}\n        max={Math.max(state.skipEveryNthRadial - 1, 1)}\n        onChange={(n) => (state.numberOfRadialsToSkip = n)}\n        label=\"Num Radials to Skip\"\n      />\n      <Toggler\n        defaultChecked={state.showControlLines}\n        onChange={() => (state.showControlLines = !state.showControlLines)}\n        label=\"Show Control Lines\"\n      />\n    </>\n  );\n\n  const renderControlPointSliders = () => (\n    <>\n      <StyledSectionLabel>Control Points</StyledSectionLabel>\n      <Slider\n        value={state.c1x}\n        min={-state.maxControlPointSize}\n        max={state.maxControlPointSize}\n        onChange={state.setC1x.bind(state)}\n        label=\"CP 1: x Position\"\n        smallFont\n      />\n      <Slider\n        value={state.c1y}\n        min={-state.maxControlPointSize}\n        max={state.maxControlPointSize}\n        onChange={state.setC1y.bind(state)}\n        label=\"CP 1: y Position\"\n        smallFont\n      />\n      <Slider\n        value={state.c2x}\n        min={-state.maxControlPointSize}\n        max={state.maxControlPointSize}\n        onChange={state.setC2x.bind(state)}\n        label=\"CP 2: x Position\"\n        smallFont\n      />\n      <Slider\n        value={state.c2y}\n        min={-state.maxControlPointSize}\n        max={state.maxControlPointSize}\n        onChange={state.setC2y.bind(state)}\n        label=\"CP 2: y Position\"\n        smallFont\n      />\n    </>\n  );\n\n  const renderControlPointVelocitySliders = () => (\n    <>\n      <StyledSectionLabel>Control Point Velocities</StyledSectionLabel>\n      <Slider\n        value={allCPVel}\n        min={0}\n        max={state.maxCPVelocity}\n        onChange={(vel) => {\n          state.setC1xVelocity(vel);\n          state.setC1yVelocity(vel);\n          state.setC2xVelocity(vel);\n          state.setC2yVelocity(vel);\n          setAllCPVel(vel);\n        }}\n        label=\"Set All CP Velocities\"\n        step={0.01}\n        smallFont\n      />\n      <StyledDivider />\n      <Slider\n        value={Math.abs(state.c1xVelocity)}\n        min={0}\n        max={state.maxCPVelocity}\n        onChange={state.setC1xVelocity.bind(state)}\n        label=\"CP 1: x Velocity\"\n        step={0.01}\n        smallFont\n      />\n      <Slider\n        value={Math.abs(state.c1yVelocity)}\n        min={0}\n        max={state.maxCPVelocity}\n        onChange={state.setC1yVelocity.bind(state)}\n        label=\"CP 1: y Velocity\"\n        step={0.01}\n        smallFont\n      />\n      <Slider\n        value={Math.abs(state.c2xVelocity)}\n        min={0}\n        max={state.maxCPVelocity}\n        onChange={state.setC2xVelocity.bind(state)}\n        label=\"CP 2: x Velocity\"\n        step={0.01}\n        smallFont\n      />\n      <Slider\n        value={Math.abs(state.c2yVelocity)}\n        min={0}\n        max={state.maxCPVelocity}\n        onChange={state.setC2yVelocity.bind(state)}\n        label=\"CP 2: y Velocity\"\n        step={0.01}\n        smallFont\n      />\n    </>\n  );\n\n  const renderControls = () => (\n    <ControlsDiv>\n      {renderControlPointSliders()}\n      {renderControlPointVelocitySliders()}\n      {renderNumberOfRadialsSection()}\n    </ControlsDiv>\n  );\n\n  return (\n    <OverlayDiv showBackground={showControls}>\n      <div>\n        <StyledButton onClick={() => setShowControls((prev) => !prev)}>\n          {showControls ? \"Hide Controls\" : \"Show Controls\"}\n        </StyledButton>\n        {showControls && (\n          <ControlsContainerDiv>{renderControls()}</ControlsContainerDiv>\n        )}\n      </div>\n      {showControls && (\n        <StyledFooter>\n          ©\n          <StyledAnchor href=\"http://www.zackmfleischman.com\">\n            Zack M Fleischman\n          </StyledAnchor>\n        </StyledFooter>\n      )}\n    </OverlayDiv>\n  );\n};\n","import vec2 from \"vec2\";\nimport { State } from \"./State\";\n\nexport type RenderFrame = (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D,  state: State, timeDelta: number) => void;\n\nexport const renderFrame: RenderFrame = (canvas, ctx,  state, timeDelta) => {\n  updateState(state, timeDelta);\n  const center = new vec2(window.innerWidth / 2.0, window.innerHeight / 2.0);\n\n  // Setup next frame\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.strokeStyle = \"white\";\n  ctx.lineWidth = state.curveWidth;\n\n  drawSurroundingCircle(ctx, state, center);\n\n  const curve = state.getCurve();\n  for (let i = 0; i < state.numRadials; ++i) {\n    if (state.skipEveryNthRadial > 0 && i % (state.skipEveryNthRadial+1) <= state.numberOfRadialsToSkip-1) continue;\n\n    const rotation = (((Math.PI * 2) / state.numRadials) * i) + state.spin;\n    curve.render(ctx, rotation, center, state.showControlLines);\n  }\n};\n\nconst drawSurroundingCircle = (ctx: CanvasRenderingContext2D, state: State, center: vec2) => {\n  ctx.moveTo(center.x + state.maxCurveSize, center.y);\n  ctx.arc(center.x, center.y, state.maxCurveSize, 0, Math.PI*2);\n  ctx.stroke();\n}\n\nconst updateState = (state: State, timeDelta: number) => {\n  if (!timeDelta) return;\n\n  if (state.c1x >= state.maxControlPointSize) \n    state.c1xVelocity = -Math.abs(state.c1xVelocity);\n  if (state.c1x <= -state.maxControlPointSize) \n    state.c1xVelocity = Math.abs(state.c1xVelocity);\n\n  if (state.c1y >= state.maxControlPointSize) \n    state.c1yVelocity = -Math.abs(state.c1yVelocity);\n  if (state.c1y <= -state.maxControlPointSize) \n    state.c1yVelocity = Math.abs(state.c1yVelocity);\n\n  if (state.c2x >= state.maxControlPointSize) \n    state.c2xVelocity = -Math.abs(state.c2xVelocity);\n  if (state.c2x <= -state.maxControlPointSize) \n    state.c2xVelocity = Math.abs(state.c2xVelocity);\n\n  if (state.c2y >= state.maxControlPointSize) \n    state.c2yVelocity = -Math.abs(state.c2yVelocity);\n  if (state.c2y <= -state.maxControlPointSize) \n    state.c2yVelocity = Math.abs(state.c2yVelocity);\n\n  state.setC1x(state.c1x + state.c1xVelocity*(timeDelta/10));\n  state.setC1y(state.c1y + state.c1yVelocity*(timeDelta/10));\n  state.setC2x(state.c2x + state.c2xVelocity*(timeDelta/10));\n  state.setC2y(state.c2y + state.c2yVelocity*(timeDelta/10));\n\n  state.spin = state.spin + state.spinVelocity*timeDelta/500 % (Math.PI*2.0)\n\n  state.renderControls();\n}","import styled from \"styled-components\";\nimport { renderFrame } from \"./renderFrame\";\nimport { State } from \"./State\";\nimport { useCanvasRenderer } from \"./useCanvasRenderer\";\n\nconst StyledCanvas = styled.canvas`\n  position: absolute;\n  height: 100vh;\n  width: 100vw;\n  background-color: #222222;\n  overflow-y: none;\n`;\n\nexport const RadialsCanvas: React.FC<{ state: State }> = ({ state }) => {\n  const canvasRef = useCanvasRenderer(renderFrame, state);\n  return <StyledCanvas id=\"radials-canvas\" ref={canvasRef} />;\n};\n","import { useRef, useEffect, useCallback } from \"react\";\nimport { RenderFrame } from \"./renderFrame\";\nimport { State } from \"./State\";\n\nexport const useCanvasRenderer = (render: RenderFrame, state: State) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const resizeCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n\n      const newMaxCurveSize =\n        (Math.min(canvas.width, canvas.height) * state.windowSizeProportion) /\n        2;\n      state.setMaxCurveSize(newMaxCurveSize);\n    }\n  }, [state]);\n\n  useEffect(() => {\n    let renderRequestId: number;\n    let startTime: number | undefined;\n    window.addEventListener(\"resize\", resizeCanvas, false);\n    resizeCanvas();\n\n    const renderFrame = (timestamp: number) => {\n      const canvas = canvasRef.current;\n      const context2D = canvas?.getContext(\"2d\");\n\n      if (startTime === undefined) startTime = timestamp;\n      const deltaTime = timestamp - startTime;\n      startTime = timestamp;\n\n      if (canvas && context2D) render(canvas, context2D, state, deltaTime);\n\n      renderRequestId = requestAnimationFrame(renderFrame);\n    };\n    requestAnimationFrame(renderFrame);\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(renderRequestId);\n      window.removeEventListener(\"resize\", resizeCanvas);\n    };\n  }, [render, state, resizeCanvas]);\n\n  return canvasRef;\n};\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { ControlsOverlay } from \"./ControlsOverlay\";\nimport { RadialsCanvas } from \"./RadialsCanvas\";\nimport { State } from \"./State\";\n\nconst AppDiv = styled.div`\n  position: relative;\n`;\n\nfunction App() {\n  const stateRef = useRef<State>(new State());\n\n  return (\n    <AppDiv>\n      <RadialsCanvas state={stateRef.current} />\n      <ControlsOverlay state={stateRef.current} />\n    </AppDiv>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}